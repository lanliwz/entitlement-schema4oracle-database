-- =========================
-- Core: Policy catalogs
-- =========================

CREATE TABLE policy (
  policy_id        NUMBER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_name      VARCHAR2(100) NOT NULL,
  definition       VARCHAR2(500),
  policy_type      VARCHAR2(30)  DEFAULT 'HYBRID' NOT NULL,
  CONSTRAINT uk_policy_name UNIQUE (policy_name),
  CONSTRAINT ck_policy_type CHECK (policy_type IN ('ROW','COLUMN','HYBRID','RBAC','ABAC'))
);

COMMENT ON TABLE policy IS 'Logical policy definition (row/column/ABAC/RBAC).';
COMMENT ON COLUMN policy.policy_name IS 'Unique name of the policy.';
COMMENT ON COLUMN policy.definition  IS 'Optional JSON/DSL for policy logic.';
COMMENT ON COLUMN policy.policy_type IS 'Type of policy: ROW, COLUMN, HYBRID, RBAC, or ABAC.';

CREATE TABLE policy_group (
  policy_group_id    NUMBER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_group_name  VARCHAR2(100) NOT NULL,
  definition         VARCHAR2(500),
  group_type         VARCHAR2(30)  DEFAULT 'PERSONA' NOT NULL,
  CONSTRAINT uk_policy_group_name UNIQUE (policy_group_name),
  CONSTRAINT ck_group_type CHECK (group_type IN ('PERSONA','APP_ROLE_SET','DATA_DOMAIN'))
);

COMMENT ON TABLE policy_group IS 'Bundle of policies representing personas or role sets.';
COMMENT ON COLUMN policy_group.policy_group_name IS 'Unique name of the group/persona.';
COMMENT ON COLUMN policy_group.definition        IS 'Optional JSON/DSL describing group scope.';
COMMENT ON COLUMN policy_group.group_type        IS 'Classification: PERSONA, APP_ROLE_SET, DATA_DOMAIN.';

-- =========================
-- Rule catalogs
-- =========================

CREATE TABLE row_filter_rule (
  row_filter_rule_id NUMBER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schema_name        VARCHAR2(30)  NOT NULL,
  table_name         VARCHAR2(128) NOT NULL,
  column_name        VARCHAR2(128) NOT NULL,
  match_value        VARCHAR2(2000),
  filter_operator    VARCHAR2(20)  DEFAULT 'EQUAL' NOT NULL,
  description        VARCHAR2(500),
  CONSTRAINT ck_row_filter_operator CHECK (filter_operator IN ('EQUAL','NOT_EQUAL','IN','LIKE','BETWEEN'))
);

COMMENT ON TABLE row_filter_rule IS 'Row-level predicate rule against a table/column.';
COMMENT ON COLUMN row_filter_rule.schema_name     IS 'Schema/owner of target table.';
COMMENT ON COLUMN row_filter_rule.table_name      IS 'Target table name.';
COMMENT ON COLUMN row_filter_rule.column_name     IS 'Column used in the predicate.';
COMMENT ON COLUMN row_filter_rule.match_value     IS 'Value/pattern/list used by operator.';
COMMENT ON COLUMN row_filter_rule.filter_operator IS 'Predicate operator EQUAL/NOT_EQUAL/IN/LIKE/BETWEEN.';

CREATE TABLE column_mask_rule (
  column_mask_rule_id NUMBER        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schema_name         VARCHAR2(30)  NOT NULL,
  table_name          VARCHAR2(128) NOT NULL,
  column_name         VARCHAR2(128) NOT NULL,
  mask_algorithm      VARCHAR2(100) DEFAULT 'LAST_4_DIGIT' NOT NULL,
  description         VARCHAR2(500),
  CONSTRAINT ck_mask_algorithm CHECK (mask_algorithm IN ('LAST_4_DIGIT','NULLIFY','HASH','REDACT','SHOW_NONE','SHOW_FIRST_3'))
);

COMMENT ON TABLE column_mask_rule IS 'Column-level masking/transformation rule.';
COMMENT ON COLUMN column_mask_rule.schema_name    IS 'Schema/owner of target table.';
COMMENT ON COLUMN column_mask_rule.table_name     IS 'Target table name.';
COMMENT ON COLUMN column_mask_rule.column_name    IS 'Column to be masked.';
COMMENT ON COLUMN column_mask_rule.mask_algorithm IS 'Masking algorithm (enumerated).';

-- =========================
-- Policy bindings to rules
-- =========================

CREATE TABLE policy_row_rule (
  row_filter_rule_id NUMBER NOT NULL,
  policy_id          NUMBER NOT NULL,
  status             VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL,
  CONSTRAINT pk_policy_row_rule PRIMARY KEY (row_filter_rule_id, policy_id),
  CONSTRAINT fk_prr_rule   FOREIGN KEY (row_filter_rule_id) REFERENCES row_filter_rule (row_filter_rule_id),
  CONSTRAINT fk_prr_policy FOREIGN KEY (policy_id)          REFERENCES policy (policy_id),
  CONSTRAINT ck_prr_status CHECK (status IN ('ACTIVE','INACTIVE'))
);

COMMENT ON TABLE policy_row_rule IS 'Associates row filter rules with policies.';
COMMENT ON COLUMN policy_row_rule.status IS 'ACTIVE/INACTIVE binding state.';

CREATE TABLE policy_column_rule (
  column_mask_rule_id NUMBER NOT NULL,
  policy_id           NUMBER NOT NULL,
  status              VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL,
  CONSTRAINT pk_policy_column_rule PRIMARY KEY (column_mask_rule_id, policy_id),
  CONSTRAINT fk_pcr_rule   FOREIGN KEY (column_mask_rule_id) REFERENCES column_mask_rule (column_mask_rule_id),
  CONSTRAINT fk_pcr_policy FOREIGN KEY (policy_id)           REFERENCES policy (policy_id),
  CONSTRAINT ck_pcr_status CHECK (status IN ('ACTIVE','INACTIVE'))
);

COMMENT ON TABLE policy_column_rule IS 'Associates column mask rules with policies.';
COMMENT ON COLUMN policy_column_rule.status IS 'ACTIVE/INACTIVE binding state.';

-- =========================
-- Entitlements (subject â†” policy group)
-- =========================

CREATE TABLE policy_group_assignment (
  user_id         VARCHAR2(64) NOT NULL,
  policy_group_id NUMBER       NOT NULL,
  status          VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL,
  granted_at      DATE,
  revoked_at      DATE,
  CONSTRAINT pk_policy_group_assignment PRIMARY KEY (user_id, policy_group_id),
  CONSTRAINT fk_pga_group FOREIGN KEY (policy_group_id) REFERENCES policy_group (policy_group_id),
  CONSTRAINT ck_pga_status CHECK (status IN ('ACTIVE','REVOKED','PENDING')),
  CONSTRAINT ck_pga_dates CHECK (revoked_at IS NULL OR granted_at IS NULL OR revoked_at >= granted_at)
);

COMMENT ON TABLE policy_group_assignment IS 'Grants a user membership in a policy group.';
COMMENT ON COLUMN policy_group_assignment.user_id    IS 'User principal/subject identifier.';
COMMENT ON COLUMN policy_group_assignment.status     IS 'Grant status: ACTIVE, REVOKED, PENDING.';
COMMENT ON COLUMN policy_group_assignment.granted_at IS 'Date/time the entitlement was granted.';
COMMENT ON COLUMN policy_group_assignment.revoked_at IS 'Date/time the entitlement was revoked.';